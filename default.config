// paddy web服务器的配置示例
// 配置文件采用json格式，仅支持单行注释以双斜线开头 //

{
	// 包含其他配置文件， 支持相对子目录(非/开头)和绝对目录(/开头)
	"include": ["subdir/xxx.json","yyy.json","/home/wwwroot/zzz.json"],
	
	// 定义后端服务器组
	"backend_group": {
		"adx": [				
			// ip:port#比重 比重默认为1
			"192.168.0.1:8080#3",
			"192.168.0.2:8080#2",
			"192.168.0.3:8080"				
		],
		"dsp": [
			"192.168.0.1:8081",
			"192.168.0.2:8081",
			"192.168.0.3:8081"							
		],
		"engine": [
			"192.168.0.1:8000",
			"192.168.0.2:8000",
			"192.168.0.3:8000"							
		]
	},
	// 定义后端
	"backend_def": [
		{
			// 别名, 须唯一
			"alias": "ad_server",
			// 包含的服务器组
			"group_list": ["adx","dsp"],
			// 包含的服务器 格式 ip:port#比重
			"backend_list": ["addr:port#3","addr:port#2"],
			// 负载策略 roundrobin|minpending|random|uri_param|jsonexp, 默认值为minpending
			// roundrobin	轮询
			// minpending	阻塞队列最小+轮询
			// random		随机分布
			// uri_param	根据uri的参数哈希分布
			// jsonexp		json表达式
			"method": "minpending"
		},
		{
			"alias": "login_server",
			"group_list": ["engine"],
			"method": "random"
		},
		{
			"alias": "freq_server",
			"group_list": ["freq"],
			"method": "uri_param",
			// 生成哈希分布的URI参数名
			"param_key": "key"
		},
		{
			"alias": "x_server",
			"group_list": ["freq"],
			"method": "jsonexp",
			"jsonexp": []
		}
	],
	
	// 定义虚拟服务器
	"server": {
		//侦听端口 ,tls表示以tls方式侦听，需要加载tls证书文件
		"listen":["80","443,tls"],
		// 侦听的域名，绝对匹配  http[s]://host/location?xxx=xx...
		"hosts": [
			"ds.vipliangmei.com",
			"in.vipliangmei.com"
		],
		
		// 证书文件 pem
		"tls_cert": "cert file",
		// 证书私钥文件 pem
		"tls_cert_key": "cert key file",
		// TLS相关参数值
		"tls_session_timeout": "30s",
								
		// location定向配置（正则表达式匹配,第1优先）
		"location_regexp": [
			{
				"exp": "^/ad_server$",
				// 作为文件目录服务的相对目录,指定了该参数，则提供目录文件服务， 其优先级低于backend
				"file_root": "/home/wwwroot",	
				// 反向代理到哪个backend
                "backend": "x_server",				
				"request_filter": [
				
				],
				// 响应过滤器（jsonexp）,可以在此处重写响应，丢弃响应， json表达式支持语义化表达，语法简洁功能强大，请参考json表达式语法和参考文档
				"response_filter": [
				
				]
			},
			{
				//...
			}
		],
		// location定向配置（jsonexp匹配，第2优先）
		"location_jsonexp": {
			"exp": [
				[
					["$req.path", "=", "/ad_server"],
					[
						["$backend", "=", "ad_server"],
						["$break", "=", 1]
					]
				],
				[
					["$req.path", "=", "/robot.txt"],
					[
						["$resp.status", "=","200"],
						["$resp.body", "=", "not allowed"],
						["$break", "=", 1]
					]
				],
				[
					["$req.path", "=", "/redirect"],
					[
						// 写重定向
						// 指定了$resp.status，则立即返回，不考虑backend和file_root
						["$resp.status", "=","302"],
						// jsonexp支持直接宏替换{{$var}},用$var的值替换该宏
						["$resp.redirect", "=", "https://baidu.com/from={{$req.uri}}"],
						["$break", "=", 1]
					]
				]				
			],
			"request_filter": [
			
			],
			"response_filter": [
				
			]
		}
	}
}